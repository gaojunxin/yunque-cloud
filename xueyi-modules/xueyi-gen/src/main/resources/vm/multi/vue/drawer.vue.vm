<template>
  <BasicDrawer
    v-bind="$attrs"
    :title="getTitle"
    @register="registerDrawer"
    width="50%"
    showFooter
    @ok="handleSubmit"
  >
    <BasicForm @register="registerForm" />
  </BasicDrawer>
</template>

<script setup lang="ts">
  import { computed, ref, unref } from 'vue';
  import { formSchema } from './data';
  import { useMessage } from '@/hooks/web/useMessage';
  import {#if($table.tree) list${ClassNameNoPrefix}Api,#end get${ClassNameNoPrefix}Api, add${ClassNameNoPrefix}Api, edit${ClassNameNoPrefix}Api } from '@/api/${fePackageName}/${businessName}.api';
  import { BasicForm, useForm } from '@/components/Form';
  import { ${ClassName}IM } from '@/model/${fePackageName}#if(!$isDependMode)/${businessName}.model#end';
  import { BasicDrawer, useDrawerInner } from '@/components/Drawer';

  const emit = defineEmits(['success', 'register']);
  const { createMessage } = useMessage();
  const isUpdate = ref(true);

  const [registerForm, { resetFields, setFieldsValue,#if($table.tree) updateSchema,#end validate }] = useForm({
    labelWidth: 120,
    schemas: formSchema,
    showActionButtonGroup: false,
  });

  const [registerDrawer, { setDrawerProps, closeDrawer }] = useDrawerInner(async (data) => {
    resetFields();
    setDrawerProps({ loading: true, confirmLoading: false });
    isUpdate.value = !!data?.isUpdate;

    if (unref(isUpdate)) {
      const info = await get${ClassNameNoPrefix}Api(data.record.${pkColumn.javaField});
      setFieldsValue({...info});
    }
#if($table.tree)
    const treeData = await list${ClassNameNoPrefix}Api({
      id: unref(isUpdate) ? data.record.${pkColumn.javaField} : undefined,
      defaultNode: true,
      exNodes: unref(isUpdate),
    });
    updateSchema({ field: '${treeMap.parentIdColumn.javaField}', componentProps: { treeData } });
#end
    setDrawerProps({ loading: false });
  });

  /** 标题初始化 */
  const getTitle = computed(() => (!unref(isUpdate) ? '新增${functionName}' : '编辑${functionName}'));

  /** 提交按钮 */
  async function handleSubmit() {
    try {
      const values: ${ClassName}IM = await validate();
      setDrawerProps({ confirmLoading: true });
      unref(isUpdate)
        ? await edit${ClassNameNoPrefix}Api(values).then(() => {
            closeDrawer();
            createMessage.success('编辑${functionName}成功！');
          })
        : await add${ClassNameNoPrefix}Api(values).then(() => {
            closeDrawer();
            createMessage.success('新增${functionName}成功！');
          });
      emit('success');
    } finally {
      setDrawerProps({ confirmLoading: false });
    }
  }
</script>
